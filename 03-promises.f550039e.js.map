{"mappings":"iiBAeA,IAAAA,EAAAC,EAAA,SAEMC,EAAcC,SAASC,cAAc,SAEvCC,EAAQ,EA2BZ,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUS,MAAAR,IAEpBM,EAAO,CAAEP,WAAUS,MAAAR,G,GAEpBA,E,IAlCPN,EAAYe,iBAAiB,UAE7B,SAAsBC,GACpBA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,OACbC,EAASC,OAAOH,EAAKI,SAASF,OAAOG,OACrCC,EAAOH,OAAOH,EAAKI,SAASE,KAAKD,OACvCpB,EAAQkB,OAAOH,EAAKI,SAASR,MAAMS,OAEnC,IAAK,IAAIE,EAAW,EAAGA,GAAYL,EAAQK,GAAY,EACrDrB,EAAcqB,EAAUtB,GACrBuB,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUuB,EAAKD,EAALb,MACjBe,EAAA/B,GAASgC,OAAOC,QACd,uBAAwCC,OAAf3B,EAAS,QAAY2B,OAANJ,EAAM,M,IAGjDK,OAAM,SAAAN,G,IAAGtB,EAAQsB,EAARtB,SAAU6B,EAAKP,EAALb,MAClBe,EAAA/B,GAASgC,OAAOK,QACd,sBAAqCH,OAAf3B,EAAS,QAAY2B,OAANE,EAAM,M,IAGjD/B,GAASqB,C","sources":["src/js/03-promises.js"],"sourcesContent":["/*\nHTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах, \nкрок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n\nНапиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount. \nПід час кожного виклику передай їй номер промісу (position), що створюється, і затримку, \nвраховуючи першу затримку (delay), введену користувачем, і крок (step).\n\nДоповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або відхиляється через delay часу. \nЗначенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів. \nВикористовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\nДля відображення повідомлень користувачеві, замість console.log(), використовуй бібліотеку notiflix.\n*/\n\nimport Notiflix from 'notiflix';\n\nconst promiseForm = document.querySelector('.form');\n\nlet delay = 0;\n\npromiseForm.addEventListener('submit', handleSubmit);\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  const form = event.target;\n  const amount = Number(form.elements.amount.value);\n  const step = Number(form.elements.step.value);\n  delay = Number(form.elements.delay.value);\n\n  for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$promiseForm","document","querySelector","$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$createPromise","position","delay3","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","delay","addEventListener","event","preventDefault","form","target","amount","Number","elements","value","step","position1","then","param","delay1","$parcel$interopDefault","Notify","success","concat","catch","delay2","failure"],"version":3,"file":"03-promises.f550039e.js.map"}