{"mappings":"qhBAeA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAcC,SAASC,cAAc,SAE3C,IAAIC,EAAQ,EA2BZ,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,EAAUS,MAAAR,IAEpBM,EAAO,C,SAAEP,EAAUS,MAAAR,GAAQ,GAE5BA,EAAM,G,CAlCbN,EAAYe,iBAAiB,UAE7B,SAAsBC,GACpBA,EAAMC,iBACN,MAAMC,EAAOF,EAAMG,OACbC,EAASC,OAAOH,EAAKI,SAASF,OAAOG,OACrCC,EAAOH,OAAOH,EAAKI,SAASE,KAAKD,OACvCpB,EAAQkB,OAAOH,EAAKI,SAASR,MAAMS,OAEnC,IAAK,IAAIE,EAAW,EAAGA,GAAYL,EAAQK,GAAY,EACrDrB,EAAcqB,EAAUtB,GACrBuB,MAAK,EAACrB,SAAEA,EAAUS,MAAAa,MACjBC,EAAA9B,GAAS+B,OAAOC,QACd,uBAAqBzB,QAAiBsB,MAAU,IAGnDI,OAAM,EAAC1B,SAAEA,EAAUS,MAAAkB,MAClBJ,EAAA9B,GAAS+B,OAAOI,QACd,sBAAoB5B,QAAe2B,MAAU,IAGnD7B,GAASqB,C","sources":["src/js/03-promises.js"],"sourcesContent":["/*\nHTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах, \nкрок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n\nНапиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount. \nПід час кожного виклику передай їй номер промісу (position), що створюється, і затримку, \nвраховуючи першу затримку (delay), введену користувачем, і крок (step).\n\nДоповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або відхиляється через delay часу. \nЗначенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів. \nВикористовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\nДля відображення повідомлень користувачеві, замість console.log(), використовуй бібліотеку notiflix.\n*/\n\nimport Notiflix from 'notiflix';\n\nconst promiseForm = document.querySelector('.form');\n\nlet delay = 0;\n\npromiseForm.addEventListener('submit', handleSubmit);\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  const form = event.target;\n  const amount = Number(form.elements.amount.value);\n  const step = Number(form.elements.step.value);\n  delay = Number(form.elements.delay.value);\n\n  for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$promiseForm","document","querySelector","$47d4ff9957288465$var$delay","$47d4ff9957288465$var$createPromise","position","delay3","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","delay","addEventListener","event","preventDefault","form","target","amount","Number","elements","value","step","position1","then","delay1","$parcel$interopDefault","Notify","success","catch","delay2","failure"],"version":3,"file":"03-promises.627384e8.js.map"}